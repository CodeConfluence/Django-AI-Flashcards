import os
from django.shortcuts import get_object_or_404, render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from decouple import config
import google.generativeai as genai
from .models import ChatHistory, Message
from .forms import ChatHistoryForm, MessageForm

genai.configure(api_key=config('API_KEY'))

@csrf_exempt
def generate_content_view(request, agent_name):
   
    flashcard_set = get_object_or_404('insert flash card model', name__iexact='insert flash card name', creator=request.user)

    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        system_instruction=flashcard_set.instructions)

    directory_path = f"media/uploads/agents/{flashcard_set.id}/"
    
    files = os.listdir(directory_path)
    
    if not files:
        return JsonResponse({"error": "No files found in the directory"}, status=400)
    
    file_path = os.path.join(directory_path, files[0])
    
    knowledge_base_file = genai.upload_file(path=file_path, display_name=f"Agent '{flashcard_set.name}' Knowledge Base PDF") 

    if request.method == "POST":
        user_message = request.POST.get('message')
        if not user_message:
            return JsonResponse({"error": "No message provided"}, status=400)

        modified_user_message = f"Using this knowledge base in the file, respond to the user message: {user_message}"

        response_schema = {
            "type": "OBJECT",
            "title": "Flashcard Generation Response",
            "description": "Schema for the flashcards generated by the AI model.",
            "properties": {
                "flashcards": {
                    "type": "ARRAY",
                    "description": "An array of flashcard objects containing questions and answers.",
                    "minItems": 1,
                    "items": {
                        "type": "OBJECT",
                        "properties": {
                            "question": {
                                "type": "STRING",
                                "description": "The question or prompt for the flashcard.",
                                "example": "What is photosynthesis?"
                            },
                            "answer": {
                                "type": "STRING",
                                "description": "The answer to the flashcard question.",
                                "example": "Photosynthesis is the process by which green plants use sunlight to synthesize food from carbon dioxide and water."
                            },
                        },
                        "required": ["question", "answer"]
                    },
                }
            },
        }


         # contents = [knowledge_base_file, modified_user_message]
        response = model.generate_content(
            modified_user_message,
            generation_config=genai.GenerationConfig(
                response_mime_type="application/json", response_schema=response_schema
            ),
        )
        chatbot_response = response.text

        return JsonResponse({"response": chatbot_response})

    return JsonResponse({'error': 'Invalid request method'}, status=405)
